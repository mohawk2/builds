.\" Automatically generated by Pod::Man version 1.15
.\" Fri Dec 19 21:06:07 2014
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "TAP::Parser::Source 3"
.TH TAP::Parser::Source 3 "perl v5.6.2" "2014-11-05" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1TAP:\s0:Parser::Source \- a \s-1TAP\s0 source & meta data about it
.SH "VERSION"
.IX Header "VERSION"
Version 3.34
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  use TAP::Parser::Source;
\&  my $source = TAP::Parser::Source->new;
\&  $source->raw( \e'reference to raw TAP source' )
\&         ->config( \e%config )
\&         ->merge( $boolean )
\&         ->switches( \e@switches )
\&         ->test_args( \e@args )
\&         ->assemble_meta;
.Ve
.Vb 2
\&  do { ... } if $source->meta->{is_file};
\&  # see assemble_meta for a full list of data available
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \s-1TAP\s0 \fIsource\fR is something that produces a stream of \s-1TAP\s0 for the parser to
consume, such as an executable file, a text file, an archive, an \s-1IO\s0 handle, a
database, etc.  \f(CW\*(C`TAP::Parser::Source\*(C'\fRs encapsulate these \fIraw\fR sources, and
provide some useful meta data about them.  They are used by
the TAP::Parser::SourceHandler manpages, which do whatever is required to produce &
capture a stream of \s-1TAP\s0 from the \fIraw\fR source, and package it up in a
the TAP::Parser::Iterator manpage for the parser to consume.
.PP
Unless you're writing a new the TAP::Parser::SourceHandler manpage, a plugin or
subclassing the TAP::Parser manpage, you probably won't need to use this module directly.
.SH "METHODS"
.IX Header "METHODS"
.Sh "Class Methods"
.IX Subsection "Class Methods"
.if n .I "\f(CW""new""\fP"
.el .I "\f(CWnew\fP"
.IX Subsection "new"
.PP
.Vb 1
\& my $source = TAP::Parser::Source->new;
.Ve
Returns a new \f(CW\*(C`TAP::Parser::Source\*(C'\fR object.
.Sh "Instance Methods"
.IX Subsection "Instance Methods"
.if n .I "\f(CW""raw""\fP"
.el .I "\f(CWraw\fP"
.IX Subsection "raw"
.PP
.Vb 2
\&  my $raw = $source->raw;
\&  $source->raw( $some_value );
.Ve
Chaining getter/setter for the raw \s-1TAP\s0 source.  This is a reference, as it may
contain large amounts of data (eg: raw \s-1TAP\s0).
.PP
.if n .I "\f(CW""meta""\fP"
.el .I "\f(CWmeta\fP"
.IX Subsection "meta"
.PP
.Vb 2
\&  my $meta = $source->meta;
\&  $source->meta({ %some_value });
.Ve
Chaining getter/setter for meta data about the source.  This defaults to an
empty hashref.  See the assemble_meta entry elsewhere in this document for more info.
.PP
.if n .I "\f(CW""has_meta""\fP"
.el .I "\f(CWhas_meta\fP"
.IX Subsection "has_meta"
.PP
True if the source has meta data.
.PP
.if n .I "\f(CW""config""\fP"
.el .I "\f(CWconfig\fP"
.IX Subsection "config"
.PP
.Vb 2
\&  my $config = $source->config;
\&  $source->config({ %some_value });
.Ve
Chaining getter/setter for the source's configuration, if any has been provided
by the user.  How it's used is up to you.  This defaults to an empty hashref.
See the config_for entry elsewhere in this document for more info.
.PP
.if n .I "\f(CW""merge""\fP"
.el .I "\f(CWmerge\fP"
.IX Subsection "merge"
.PP
.Vb 2
\&  my $merge = $source->merge;
\&  $source->config( $bool );
.Ve
Chaining getter/setter for the flag that dictates whether \s-1STDOUT\s0 and \s-1STDERR\s0
should be merged (where appropriate).  Defaults to undef.
.PP
.if n .I "\f(CW""switches""\fP"
.el .I "\f(CWswitches\fP"
.IX Subsection "switches"
.PP
.Vb 2
\&  my $switches = $source->switches;
\&  $source->config([ @switches ]);
.Ve
Chaining getter/setter for the list of command-line switches that should be
passed to the source (where appropriate).  Defaults to undef.
.PP
.if n .I "\f(CW""test_args""\fP"
.el .I "\f(CWtest_args\fP"
.IX Subsection "test_args"
.PP
.Vb 2
\&  my $test_args = $source->test_args;
\&  $source->config([ @test_args ]);
.Ve
Chaining getter/setter for the list of command-line arguments that should be
passed to the source (where appropriate).  Defaults to undef.
.PP
.if n .I "\f(CW""assemble_meta""\fP"
.el .I "\f(CWassemble_meta\fP"
.IX Subsection "assemble_meta"
.PP
.Vb 1
\&  my $meta = $source->assemble_meta;
.Ve
Gathers meta data about the the raw entry elsewhere in this document source, stashes it in the meta entry elsewhere in this document and returns
it as a hashref.  This is done so that the the TAP::Parser::SourceHandler manpages don't
have to repeat common checks.  Currently this includes:
.PP
.Vb 3
\&    is_scalar => $bool,
\&    is_hash   => $bool,
\&    is_array  => $bool,
.Ve
.Vb 3
\&    # for scalars:
\&    length => $n
\&    has_newlines => $bool
.Ve
.Vb 31
\&    # only done if the scalar looks like a filename
\&    is_file => $bool,
\&    is_dir  => $bool,
\&    is_symlink => $bool,
\&    file => {
\&        # only done if the scalar looks like a filename
\&        basename => $string, # including ext
\&        dir      => $string,
\&        ext      => $string,
\&        lc_ext   => $string,
\&        # system checks
\&        exists  => $bool,
\&        stat    => [ ... ], # perldoc -f stat
\&        empty   => $bool,
\&        size    => $n,
\&        text    => $bool,
\&        binary  => $bool,
\&        read    => $bool,
\&        write   => $bool,
\&        execute => $bool,
\&        setuid  => $bool,
\&        setgid  => $bool,
\&        sticky  => $bool,
\&        is_file => $bool,
\&        is_dir  => $bool,
\&        is_symlink => $bool,
\&        # only done if the file's a symlink
\&        lstat      => [ ... ], # perldoc -f lstat
\&        # only done if the file's a readable text file
\&        shebang => $first_line,
\&    }
.Ve
.Vb 2
\&  # for arrays:
\&  size => $n,
.Ve
.if n .I "\f(CW""shebang""\fP"
.el .I "\f(CWshebang\fP"
.IX Subsection "shebang"
.PP
Get the shebang line for a script file.
.PP
.Vb 1
\&  my $shebang = TAP::Parser::Source->shebang( $some_script );
.Ve
May be called as a class method
.PP
.if n .I "\f(CW""config_for""\fP"
.el .I "\f(CWconfig_for\fP"
.IX Subsection "config_for"
.PP
.Vb 1
\&  my $config = $source->config_for( $class );
.Ve
Returns the config entry elsewhere in this document for the \f(CW$class\fR given.  Class names may be fully qualified
or abbreviated, eg:
.PP
.Vb 3
\&  # these are equivalent
\&  $source->config_for( 'Perl' );
\&  $source->config_for( 'TAP::Parser::SourceHandler::Perl' );
.Ve
If a fully qualified \f(CW$class\fR is given, its abbreviated version is checked first.
.SH "AUTHORS"
.IX Header "AUTHORS"
Steve Purkis.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the TAP::Object manpage,
the TAP::Parser manpage,
the TAP::Parser::IteratorFactory manpage,
the TAP::Parser::SourceHandler manpage

.\" Automatically generated by Pod::Man version 1.15
.\" Thu Jan 22 05:26:24 2015
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "App::Prove::State 3"
.TH App::Prove::State 3 "perl v5.6.2" "2015-01-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
App::Prove::State \- State storage for the \f(CW\*(C`prove\*(C'\fR command.
.SH "VERSION"
.IX Header "VERSION"
Version 3.35
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`prove\*(C'\fR command supports a \f(CW\*(C`\-\-state\*(C'\fR option that instructs it to
store persistent state across runs. This module implements that state
and the operations that may be performed on it.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Re-run failed tests
\&    $ prove --state=failed,save -rbv
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "Class Methods"
.IX Subsection "Class Methods"
.if n .I "\f(CW""new""\fP"
.el .I "\f(CWnew\fP"
.IX Subsection "new"
.PP
Accepts a hashref with the following key/value pairs:
.if n .Ip "\(bu \f(CW""""store""""\fR" 4
.el .Ip "\(bu \f(CWstore\fR" 4
.IX Item "store"
The filename of the data store holding the data that App::Prove::State reads.
.if n .Ip "\(bu \f(CW""""extensions""""\fR (optional)" 4
.el .Ip "\(bu \f(CWextensions\fR (optional)" 4
.IX Item "extensions (optional)"
The test name extensions.  Defaults to \f(CW\*(C`.t\*(C'\fR.
.if n .Ip "\(bu \f(CW""""result_class""""\fR (optional)" 4
.el .Ip "\(bu \f(CWresult_class\fR (optional)" 4
.IX Item "result_class (optional)"
The name of the \f(CW\*(C`result_class\*(C'\fR.  Defaults to \f(CW\*(C`App::Prove::State::Result\*(C'\fR.
.if n .Sh "\f(CW""result_class""\fP"
.el .Sh "\f(CWresult_class\fP"
.IX Subsection "result_class"
Getter/setter for the name of the class used for tracking test results.  This
class should either subclass from \f(CW\*(C`App::Prove::State::Result\*(C'\fR or provide an
identical interface.
.if n .Sh "\f(CW""extensions""\fP"
.el .Sh "\f(CWextensions\fP"
.IX Subsection "extensions"
Get or set the list of extensions that files must have in order to be
considered tests. Defaults to ['.t'].
.if n .Sh "\f(CW""results""\fP"
.el .Sh "\f(CWresults\fP"
.IX Subsection "results"
Get the results of the last test run.  Returns a \f(CW\*(C`result_class()\*(C'\fR instance.
.if n .Sh "\f(CW""commit""\fP"
.el .Sh "\f(CWcommit\fP"
.IX Subsection "commit"
Save the test results. Should be called after all tests have run.
.Sh "Instance Methods"
.IX Subsection "Instance Methods"
.if n .I "\f(CW""apply_switch""\fP"
.el .I "\f(CWapply_switch\fP"
.IX Subsection "apply_switch"
.PP
.Vb 1
\& $self->apply_switch('failed,save');
.Ve
Apply a list of switch options to the state, updating the internal
object state as a result. Nothing is returned.
.PP
Diagnostics:
    \- \*(L"Illegal state option: \f(CW%s\fR\*(R"
.if n .Ip "\f(CW""""last""""\fR" 4
.el .Ip "\f(CWlast\fR" 4
.IX Item "last"
Run in the same order as last time
.if n .Ip "\f(CW""""failed""""\fR" 4
.el .Ip "\f(CWfailed\fR" 4
.IX Item "failed"
Run only the failed tests from last time
.if n .Ip "\f(CW""""passed""""\fR" 4
.el .Ip "\f(CWpassed\fR" 4
.IX Item "passed"
Run only the passed tests from last time
.if n .Ip "\f(CW""""all""""\fR" 4
.el .Ip "\f(CWall\fR" 4
.IX Item "all"
Run all tests in normal order
.if n .Ip "\f(CW""""hot""""\fR" 4
.el .Ip "\f(CWhot\fR" 4
.IX Item "hot"
Run the tests that most recently failed first
.if n .Ip "\f(CW""""todo""""\fR" 4
.el .Ip "\f(CWtodo\fR" 4
.IX Item "todo"
Run the tests ordered by number of todos.
.if n .Ip "\f(CW""""slow""""\fR" 4
.el .Ip "\f(CWslow\fR" 4
.IX Item "slow"
Run the tests in slowest to fastest order.
.if n .Ip "\f(CW""""fast""""\fR" 4
.el .Ip "\f(CWfast\fR" 4
.IX Item "fast"
Run test tests in fastest to slowest order.
.if n .Ip "\f(CW""""new""""\fR" 4
.el .Ip "\f(CWnew\fR" 4
.IX Item "new"
Run the tests in newest to oldest order.
.if n .Ip "\f(CW""""old""""\fR" 4
.el .Ip "\f(CWold\fR" 4
.IX Item "old"
Run the tests in oldest to newest order.
.if n .Ip "\f(CW""""save""""\fR" 4
.el .Ip "\f(CWsave\fR" 4
.IX Item "save"
Save the state on exit.
.PP
.if n .I "\f(CW""get_tests""\fP"
.el .I "\f(CWget_tests\fP"
.IX Subsection "get_tests"
.PP
Given a list of args get the names of tests that should run
.PP
.if n .I "\f(CW""observe_test""\fP"
.el .I "\f(CWobserve_test\fP"
.IX Subsection "observe_test"
.PP
Store the results of a test.
.PP
.if n .I "\f(CW""save""\fP"
.el .I "\f(CWsave\fP"
.IX Subsection "save"
.PP
Write the state to a file.
.PP
.if n .I "\f(CW""load""\fP"
.el .I "\f(CWload\fP"
.IX Subsection "load"
.PP
Load the state from a file

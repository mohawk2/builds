.\" Automatically generated by Pod::Man version 1.15
.\" Tue Sep 23 12:35:41 2014
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "TAP::Parser::Iterator 3"
.TH TAP::Parser::Iterator 3 "perl v5.6.2" "2014-08-16" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1TAP:\s0:Parser::Iterator \- Base class for \s-1TAP\s0 source iterators
.SH "VERSION"
.IX Header "VERSION"
Version 3.33
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&  # to subclass:
\&  use TAP::Parser::Iterator ();
\&  use base 'TAP::Parser::Iterator';
\&  sub _initialize {
\&    # see TAP::Object...
\&  }
.Ve
.Vb 3
\&  sub next_raw { ... }
\&  sub wait     { ... }
\&  sub exit     { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple iterator base class that defines the TAP::Parser manpage's iterator
\&\s-1API\s0.  Iterators are typically created from the TAP::Parser::SourceHandler manpages.
.SH "METHODS"
.IX Header "METHODS"
.Sh "Class Methods"
.IX Subsection "Class Methods"
.if n .I "\f(CW""new""\fP"
.el .I "\f(CWnew\fP"
.IX Subsection "new"
.PP
Create an iterator.  Provided by the TAP::Object manpage.
.Sh "Instance Methods"
.IX Subsection "Instance Methods"
.if n .I "\f(CW""next""\fP"
.el .I "\f(CWnext\fP"
.IX Subsection "next"
.PP
.Vb 1
\& while ( my $item = $iter->next ) { ... }
.Ve
Iterate through it, of course.
.PP
.if n .I "\f(CW""next_raw""\fP"
.el .I "\f(CWnext_raw\fP"
.IX Subsection "next_raw"
.PP
\&\fBNote:\fR this method is abstract and should be overridden.
.PP
.Vb 1
\& while ( my $item = $iter->next_raw ) { ... }
.Ve
Iterate raw input without applying any fixes for quirky input syntax.
.PP
.if n .I "\f(CW""handle_unicode""\fP"
.el .I "\f(CWhandle_unicode\fP"
.IX Subsection "handle_unicode"
.PP
If necessary switch the input stream to handle unicode. This only has
any effect for I/O handle based streams.
.PP
The default implementation does nothing.
.PP
.if n .I "\f(CW""get_select_handles""\fP"
.el .I "\f(CWget_select_handles\fP"
.IX Subsection "get_select_handles"
.PP
Return a list of filehandles that may be used upstream in a \fIselect()\fR
call to signal that this Iterator is ready. Iterators that are not
handle-based should return an empty list.
.PP
The default implementation does nothing.
.PP
.if n .I "\f(CW""wait""\fP"
.el .I "\f(CWwait\fP"
.IX Subsection "wait"
.PP
\&\fBNote:\fR this method is abstract and should be overridden.
.PP
.Vb 1
\& my $wait_status = $iter->wait;
.Ve
Return the \f(CW\*(C`wait\*(C'\fR status for this iterator.
.PP
.if n .I "\f(CW""exit""\fP"
.el .I "\f(CWexit\fP"
.IX Subsection "exit"
.PP
\&\fBNote:\fR this method is abstract and should be overridden.
.PP
.Vb 1
\& my $wait_status = $iter->exit;
.Ve
Return the \f(CW\*(C`exit\*(C'\fR status for this iterator.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see the SUBCLASSING entry in the TAP::Parser manpage for a subclassing overview.
.PP
You must override the abstract methods as noted above.
.Sh "Example"
.IX Subsection "Example"
the TAP::Parser::Iterator::Array manpage is probably the easiest example to follow.
There's not much point repeating it here.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the TAP::Object manpage,
the TAP::Parser manpage,
the TAP::Parser::Iterator::Array manpage,
the TAP::Parser::Iterator::Stream manpage,
the TAP::Parser::Iterator::Process manpage,

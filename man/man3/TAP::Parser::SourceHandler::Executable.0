.\" Automatically generated by Pod::Man version 1.15
.\" Thu Jan 22 04:16:54 2015
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "TAP::Parser::SourceHandler::Executable 3"
.TH TAP::Parser::SourceHandler::Executable 3 "perl v5.6.2" "2015-01-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1TAP:\s0:Parser::SourceHandler::Executable \- Stream output from an executable \s-1TAP\s0 source
.SH "VERSION"
.IX Header "VERSION"
Version 3.35
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use TAP::Parser::Source;
\&  use TAP::Parser::SourceHandler::Executable;
.Ve
.Vb 2
\&  my $source = TAP::Parser::Source->new->raw(['/usr/bin/ruby', 'mytest.rb']);
\&  $source->assemble_meta;
.Ve
.Vb 3
\&  my $class = 'TAP::Parser::SourceHandler::Executable';
\&  my $vote  = $class->can_handle( $source );
\&  my $iter  = $class->make_iterator( $source );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an \fIexecutable\fR the TAP::Parser::SourceHandler manpage \- it has 2 jobs:
.PP
1. Figure out if the the TAP::Parser::Source manpage it's given is an executable
   command (the can_handle entry elsewhere in this document).
.PP
2. Creates an iterator for executable commands (the make_iterator entry elsewhere in this document).
.PP
Unless you're writing a plugin or subclassing the TAP::Parser manpage, you
probably won't need to use this module directly.
.SH "METHODS"
.IX Header "METHODS"
.Sh "Class Methods"
.IX Subsection "Class Methods"
.if n .I "\f(CW""can_handle""\fP"
.el .I "\f(CWcan_handle\fP"
.IX Subsection "can_handle"
.PP
.Vb 1
\&  my $vote = $class->can_handle( $source );
.Ve
Only votes if \f(CW$source\fR looks like an executable file. Casts the
following votes:
.PP
.Vb 3
\&  0.9  if it's a hash with an 'exec' key
\&  0.8  if it's a .bat file
\&  0.75 if it's got an execute bit set
.Ve
.if n .I "\f(CW""make_iterator""\fP"
.el .I "\f(CWmake_iterator\fP"
.IX Subsection "make_iterator"
.PP
.Vb 1
\&  my $iterator = $class->make_iterator( $source );
.Ve
Returns a new the TAP::Parser::Iterator::Process manpage for the source.
\&\f(CW\*(C`$source\->raw\*(C'\fR must be in one of the following forms:
.PP
.Vb 1
\&  { exec => [ @exec ] }
.Ve
.Vb 1
\&  [ @exec ]
.Ve
.Vb 1
\&  $file
.Ve
\&\f(CW\*(C`croak\*(C'\fRs on error.
.PP
.if n .I "\f(CW""iterator_class""\fP"
.el .I "\f(CWiterator_class\fP"
.IX Subsection "iterator_class"
.PP
The class of iterator to use, override if you're sub-classing.  Defaults
to the TAP::Parser::Iterator::Process manpage.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see the SUBCLASSING entry in the TAP::Parser manpage for a subclassing overview.
.Sh "Example"
.IX Subsection "Example"
.Vb 1
\&  package MyRubySourceHandler;
.Ve
.Vb 1
\&  use strict;
.Ve
.Vb 2
\&  use Carp qw( croak );
\&  use TAP::Parser::SourceHandler::Executable;
.Ve
.Vb 1
\&  use base 'TAP::Parser::SourceHandler::Executable';
.Ve
.Vb 8
\&  # expect $handler->(['mytest.rb', 'cmdline', 'args']);
\&  sub make_iterator {
\&    my ($self, $source) = @_;
\&    my @test_args = @{ $source->test_args };
\&    my $rb_file   = $test_args[0];
\&    croak("error: Ruby file '$rb_file' not found!") unless (-f $rb_file);
\&    return $self->SUPER::raw_source(['/usr/bin/ruby', @test_args]);
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the TAP::Object manpage,
the TAP::Parser manpage,
the TAP::Parser::IteratorFactory manpage,
the TAP::Parser::SourceHandler manpage,
the TAP::Parser::SourceHandler::Perl manpage,
the TAP::Parser::SourceHandler::File manpage,
the TAP::Parser::SourceHandler::Handle manpage,
the TAP::Parser::SourceHandler::RawTAP manpage

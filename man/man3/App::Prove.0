.\" Automatically generated by Pod::Man version 1.15
.\" Thu Jan 22 04:17:05 2015
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "App::Prove 3"
.TH App::Prove 3 "perl v5.6.2" "2015-01-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
App::Prove \- Implements the \f(CW\*(C`prove\*(C'\fR command.
.SH "VERSION"
.IX Header "VERSION"
Version 3.35
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
the Test::Harness manpage provides a command, \f(CW\*(C`prove\*(C'\fR, which runs a \s-1TAP\s0 based
test suite and prints a report. The \f(CW\*(C`prove\*(C'\fR command is a minimal
wrapper around an instance of this module.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use App::Prove;
.Ve
.Vb 3
\&    my $app = App::Prove->new;
\&    $app->process_args(@ARGV);
\&    $app->run;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "Class Methods"
.IX Subsection "Class Methods"
.if n .I "\f(CW""new""\fP"
.el .I "\f(CWnew\fP"
.IX Subsection "new"
.PP
Create a new \f(CW\*(C`App::Prove\*(C'\fR. Optionally a hash ref of attribute
initializers may be passed.
.PP
.if n .I "\f(CW""state_class""\fP"
.el .I "\f(CWstate_class\fP"
.IX Subsection "state_class"
.PP
Getter/setter for the name of the class used for maintaining state.  This
class should either subclass from \f(CW\*(C`App::Prove::State\*(C'\fR or provide an identical
interface.
.PP
.if n .I "\f(CW""state_manager""\fP"
.el .I "\f(CWstate_manager\fP"
.IX Subsection "state_manager"
.PP
Getter/setter for the instance of the \f(CW\*(C`state_class\*(C'\fR.
.PP
.if n .I "\f(CW""add_rc_file""\fP"
.el .I "\f(CWadd_rc_file\fP"
.IX Subsection "add_rc_file"
.PP
.Vb 1
\&    $prove->add_rc_file('myproj/.proverc');
.Ve
Called before \f(CW\*(C`process_args\*(C'\fR to prepend the contents of an rc file to
the options.
.PP
.if n .I "\f(CW""process_args""\fP"
.el .I "\f(CWprocess_args\fP"
.IX Subsection "process_args"
.PP
.Vb 1
\&    $prove->process_args(@args);
.Ve
Processes the command-line arguments. Attributes will be set
appropriately. Any filenames may be found in the \f(CW\*(C`argv\*(C'\fR attribute.
.PP
Dies on invalid arguments.
.PP
.if n .I "\f(CW""run""\fP"
.el .I "\f(CWrun\fP"
.IX Subsection "run"
.PP
Perform whatever actions the command line args specified. The \f(CW\*(C`prove\*(C'\fR
command line tool consists of the following code:
.PP
.Vb 1
\&    use App::Prove;
.Ve
.Vb 3
\&    my $app = App::Prove->new;
\&    $app->process_args(@ARGV);
\&    exit( $app->run ? 0 : 1 );  # if you need the exit code
.Ve
.if n .I "\f(CW""require_harness""\fP"
.el .I "\f(CWrequire_harness\fP"
.IX Subsection "require_harness"
.PP
Load a harness replacement class.
.PP
.Vb 1
\&  $prove->require_harness($for => $class_name);
.Ve
.if n .I "\f(CW""print_version""\fP"
.el .I "\f(CWprint_version\fP"
.IX Subsection "print_version"
.PP
Display the version numbers of the loaded the TAP::Harness manpage and the
current Perl.
.Sh "Attributes"
.IX Subsection "Attributes"
After command line parsing the following attributes reflect the values
of the corresponding command line switches. They may be altered before
calling \f(CW\*(C`run\*(C'\fR.
.if n .Ip "\f(CW""""archive""""\fR" 4
.el .Ip "\f(CWarchive\fR" 4
.IX Item "archive"
.PD 0
.if n .Ip "\f(CW""""argv""""\fR" 4
.el .Ip "\f(CWargv\fR" 4
.IX Item "argv"
.if n .Ip "\f(CW""""backwards""""\fR" 4
.el .Ip "\f(CWbackwards\fR" 4
.IX Item "backwards"
.if n .Ip "\f(CW""""blib""""\fR" 4
.el .Ip "\f(CWblib\fR" 4
.IX Item "blib"
.if n .Ip "\f(CW""""color""""\fR" 4
.el .Ip "\f(CWcolor\fR" 4
.IX Item "color"
.if n .Ip "\f(CW""""directives""""\fR" 4
.el .Ip "\f(CWdirectives\fR" 4
.IX Item "directives"
.if n .Ip "\f(CW""""dry""""\fR" 4
.el .Ip "\f(CWdry\fR" 4
.IX Item "dry"
.if n .Ip "\f(CW""""exec""""\fR" 4
.el .Ip "\f(CWexec\fR" 4
.IX Item "exec"
.if n .Ip "\f(CW""""extensions""""\fR" 4
.el .Ip "\f(CWextensions\fR" 4
.IX Item "extensions"
.if n .Ip "\f(CW""""failures""""\fR" 4
.el .Ip "\f(CWfailures\fR" 4
.IX Item "failures"
.if n .Ip "\f(CW""""comments""""\fR" 4
.el .Ip "\f(CWcomments\fR" 4
.IX Item "comments"
.if n .Ip "\f(CW""""formatter""""\fR" 4
.el .Ip "\f(CWformatter\fR" 4
.IX Item "formatter"
.if n .Ip "\f(CW""""harness""""\fR" 4
.el .Ip "\f(CWharness\fR" 4
.IX Item "harness"
.if n .Ip "\f(CW""""ignore_exit""""\fR" 4
.el .Ip "\f(CWignore_exit\fR" 4
.IX Item "ignore_exit"
.if n .Ip "\f(CW""""includes""""\fR" 4
.el .Ip "\f(CWincludes\fR" 4
.IX Item "includes"
.if n .Ip "\f(CW""""jobs""""\fR" 4
.el .Ip "\f(CWjobs\fR" 4
.IX Item "jobs"
.if n .Ip "\f(CW""""lib""""\fR" 4
.el .Ip "\f(CWlib\fR" 4
.IX Item "lib"
.if n .Ip "\f(CW""""merge""""\fR" 4
.el .Ip "\f(CWmerge\fR" 4
.IX Item "merge"
.if n .Ip "\f(CW""""modules""""\fR" 4
.el .Ip "\f(CWmodules\fR" 4
.IX Item "modules"
.if n .Ip "\f(CW""""parse""""\fR" 4
.el .Ip "\f(CWparse\fR" 4
.IX Item "parse"
.if n .Ip "\f(CW""""plugins""""\fR" 4
.el .Ip "\f(CWplugins\fR" 4
.IX Item "plugins"
.if n .Ip "\f(CW""""quiet""""\fR" 4
.el .Ip "\f(CWquiet\fR" 4
.IX Item "quiet"
.if n .Ip "\f(CW""""really_quiet""""\fR" 4
.el .Ip "\f(CWreally_quiet\fR" 4
.IX Item "really_quiet"
.if n .Ip "\f(CW""""recurse""""\fR" 4
.el .Ip "\f(CWrecurse\fR" 4
.IX Item "recurse"
.if n .Ip "\f(CW""""rules""""\fR" 4
.el .Ip "\f(CWrules\fR" 4
.IX Item "rules"
.if n .Ip "\f(CW""""show_count""""\fR" 4
.el .Ip "\f(CWshow_count\fR" 4
.IX Item "show_count"
.if n .Ip "\f(CW""""show_help""""\fR" 4
.el .Ip "\f(CWshow_help\fR" 4
.IX Item "show_help"
.if n .Ip "\f(CW""""show_man""""\fR" 4
.el .Ip "\f(CWshow_man\fR" 4
.IX Item "show_man"
.if n .Ip "\f(CW""""show_version""""\fR" 4
.el .Ip "\f(CWshow_version\fR" 4
.IX Item "show_version"
.if n .Ip "\f(CW""""shuffle""""\fR" 4
.el .Ip "\f(CWshuffle\fR" 4
.IX Item "shuffle"
.if n .Ip "\f(CW""""state""""\fR" 4
.el .Ip "\f(CWstate\fR" 4
.IX Item "state"
.if n .Ip "\f(CW""""state_class""""\fR" 4
.el .Ip "\f(CWstate_class\fR" 4
.IX Item "state_class"
.if n .Ip "\f(CW""""taint_fail""""\fR" 4
.el .Ip "\f(CWtaint_fail\fR" 4
.IX Item "taint_fail"
.if n .Ip "\f(CW""""taint_warn""""\fR" 4
.el .Ip "\f(CWtaint_warn\fR" 4
.IX Item "taint_warn"
.if n .Ip "\f(CW""""test_args""""\fR" 4
.el .Ip "\f(CWtest_args\fR" 4
.IX Item "test_args"
.if n .Ip "\f(CW""""timer""""\fR" 4
.el .Ip "\f(CWtimer\fR" 4
.IX Item "timer"
.if n .Ip "\f(CW""""verbose""""\fR" 4
.el .Ip "\f(CWverbose\fR" 4
.IX Item "verbose"
.if n .Ip "\f(CW""""warnings_fail""""\fR" 4
.el .Ip "\f(CWwarnings_fail\fR" 4
.IX Item "warnings_fail"
.if n .Ip "\f(CW""""warnings_warn""""\fR" 4
.el .Ip "\f(CWwarnings_warn\fR" 4
.IX Item "warnings_warn"
.if n .Ip "\f(CW""""tapversion""""\fR" 4
.el .Ip "\f(CWtapversion\fR" 4
.IX Item "tapversion"
.if n .Ip "\f(CW""""trap""""\fR" 4
.el .Ip "\f(CWtrap\fR" 4
.IX Item "trap"
.PD
.SH "PLUGINS"
.IX Header "PLUGINS"
\&\f(CW\*(C`App::Prove\*(C'\fR provides support for 3rd-party plugins.  These are currently
loaded at run-time, \fIafter\fR arguments have been parsed (so you can not
change the way arguments are processed, sorry), typically with the
\&\f(CW\*(C`\-P\f(CIplugin\f(CW\*(C'\fR switch, eg:
.PP
.Vb 1
\&  prove -PMyPlugin
.Ve
This will search for a module named \f(CW\*(C`App::Prove::Plugin::MyPlugin\*(C'\fR, or failing
that, \f(CW\*(C`MyPlugin\*(C'\fR.  If the plugin can't be found, \f(CW\*(C`prove\*(C'\fR will complain & exit.
.PP
You can pass an argument to your plugin by appending an \f(CW\*(C`=\*(C'\fR after the plugin
name, eg \f(CW\*(C`\-PMyPlugin=foo\*(C'\fR.  You can pass multiple arguments using commas:
.PP
.Vb 1
\&  prove -PMyPlugin=foo,bar,baz
.Ve
These are passed in to your plugin's \f(CW\*(C`load()\*(C'\fR class method (if it has one),
along with a reference to the \f(CW\*(C`App::Prove\*(C'\fR object that is invoking your plugin:
.PP
.Vb 2
\&  sub load {
\&      my ($class, $p) = @_;
.Ve
.Vb 5
\&      my @args = @{ $p->{args} };
\&      # @args will contain ( 'foo', 'bar', 'baz' )
\&      $p->{app_prove}->do_something;
\&      ...
\&  }
.Ve
Note that the user's arguments are also passed to your plugin's \f(CW\*(C`import()\*(C'\fR
function as a list, eg:
.PP
.Vb 5
\&  sub import {
\&      my ($class, @args) = @_;
\&      # @args will contain ( 'foo', 'bar', 'baz' )
\&      ...
\&  }
.Ve
This is for backwards compatibility, and may be deprecated in the future.
.Sh "Sample Plugin"
.IX Subsection "Sample Plugin"
Here's a sample plugin, for your reference:
.PP
.Vb 1
\&  package App::Prove::Plugin::Foo;
.Ve
.Vb 4
\&  # Sample plugin, try running with:
\&  # prove -PFoo=bar -r -j3
\&  # prove -PFoo -Q
\&  # prove -PFoo=bar,My::Formatter
.Ve
.Vb 2
\&  use strict;
\&  use warnings;
.Ve
.Vb 4
\&  sub load {
\&      my ($class, $p) = @_;
\&      my @args = @{ $p->{args} };
\&      my $app  = $p->{app_prove};
.Ve
.Vb 1
\&      print "loading plugin: $class, args: ", join(', ', @args ), "\en";
.Ve
.Vb 2
\&      # turn on verbosity
\&      $app->verbose( 1 );
.Ve
.Vb 2
\&      # set the formatter?
\&      $app->formatter( $args[1] ) if @args > 1;
.Ve
.Vb 6
\&      # print some of App::Prove's state:
\&      for my $attr (qw( jobs quiet really_quiet recurse verbose )) {
\&          my $val = $app->$attr;
\&          $val    = 'undef' unless defined( $val );
\&          print "$attr: $val\en";
\&      }
.Ve
.Vb 2
\&      return 1;
\&  }
.Ve
.Vb 1
\&  1;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the prove manpage, the TAP::Harness manpage

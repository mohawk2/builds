.\" Automatically generated by Pod::Man version 1.15
.\" Thu Jan 22 05:26:24 2015
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "TAP::Parser::Result 3"
.TH TAP::Parser::Result 3 "perl v5.6.2" "2015-01-14" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1TAP:\s0:Parser::Result \- Base class for \s-1TAP:\s0:Parser output objects
.SH "VERSION"
.IX Header "VERSION"
Version 3.35
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # abstract class - not meant to be used directly
\&  # see TAP::Parser::ResultFactory for preferred usage
.Ve
.Vb 4
\&  # directly:
\&  use TAP::Parser::Result;
\&  my $token  = {...};
\&  my $result = TAP::Parser::Result->new( $token );
.Ve
.Sh "\s-1DESCRIPTION\s0"
.IX Subsection "DESCRIPTION"
This is a simple base class used by the TAP::Parser manpage to store objects that
represent the current bit of test output data from \s-1TAP\s0 (usually a single
line).  Unless you're subclassing, you probably won't need to use this module
directly.
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
.if n .I "\f(CW""new""\fP"
.el .I "\f(CWnew\fP"
.IX Subsection "new"
.PP
.Vb 1
\&  # see TAP::Parser::ResultFactory for preferred usage
.Ve
.Vb 2
\&  # to use directly:
\&  my $result = TAP::Parser::Result->new($token);
.Ve
Returns an instance the appropriate class for the test token passed in.
.Sh "Boolean methods"
.IX Subsection "Boolean methods"
The following methods all return a boolean value and are to be overridden in
the appropriate subclass.
.if n .Ip "\(bu \f(CW""""is_plan""""\fR" 4
.el .Ip "\(bu \f(CWis_plan\fR" 4
.IX Item "is_plan"
Indicates whether or not this is the test plan line.
.Sp
.Vb 1
\& 1..3
.Ve
.if n .Ip "\(bu \f(CW""""is_pragma""""\fR" 4
.el .Ip "\(bu \f(CWis_pragma\fR" 4
.IX Item "is_pragma"
Indicates whether or not this is a pragma line.
.Sp
.Vb 1
\& pragma +strict
.Ve
.if n .Ip "\(bu \f(CW""""is_test""""\fR" 4
.el .Ip "\(bu \f(CWis_test\fR" 4
.IX Item "is_test"
Indicates whether or not this is a test line.
.Sp
.Vb 1
\& ok 1 Is OK!
.Ve
.if n .Ip "\(bu \f(CW""""is_comment""""\fR" 4
.el .Ip "\(bu \f(CWis_comment\fR" 4
.IX Item "is_comment"
Indicates whether or not this is a comment.
.Sp
.Vb 1
\& # this is a comment
.Ve
.if n .Ip "\(bu \f(CW""""is_bailout""""\fR" 4
.el .Ip "\(bu \f(CWis_bailout\fR" 4
.IX Item "is_bailout"
Indicates whether or not this is bailout line.
.Sp
.Vb 1
\& Bail out! We're out of dilithium crystals.
.Ve
.if n .Ip "\(bu \f(CW""""is_version""""\fR" 4
.el .Ip "\(bu \f(CWis_version\fR" 4
.IX Item "is_version"
Indicates whether or not this is a \s-1TAP\s0 version line.
.Sp
.Vb 1
\& TAP version 4
.Ve
.if n .Ip "\(bu \f(CW""""is_unknown""""\fR" 4
.el .Ip "\(bu \f(CWis_unknown\fR" 4
.IX Item "is_unknown"
Indicates whether or not the current line could be parsed.
.Sp
.Vb 1
\& ... this line is junk ...
.Ve
.if n .Ip "\(bu \f(CW""""is_yaml""""\fR" 4
.el .Ip "\(bu \f(CWis_yaml\fR" 4
.IX Item "is_yaml"
Indicates whether or not this is a \s-1YAML\s0 chunk.
.PP
.if n .I "\f(CW""raw""\fP"
.el .I "\f(CWraw\fP"
.IX Subsection "raw"
.PP
.Vb 1
\&  print $result->raw;
.Ve
Returns the original line of text which was parsed.
.PP
.if n .I "\f(CW""type""\fP"
.el .I "\f(CWtype\fP"
.IX Subsection "type"
.PP
.Vb 1
\&  my $type = $result->type;
.Ve
Returns the \*(L"type\*(R" of a token, such as \f(CW\*(C`comment\*(C'\fR or \f(CW\*(C`test\*(C'\fR.
.PP
.if n .I "\f(CW""as_string""\fP"
.el .I "\f(CWas_string\fP"
.IX Subsection "as_string"
.PP
.Vb 1
\&  print $result->as_string;
.Ve
Prints a string representation of the token.  This might not be the exact
output, however.  Tests will have test numbers added if not present, \s-1TODO\s0 and
\&\s-1SKIP\s0 directives will be capitalized and, in general, things will be cleaned
up.  If you need the original text for the token, see the \f(CW\*(C`raw\*(C'\fR method.
.PP
.if n .I "\f(CW""is_ok""\fP"
.el .I "\f(CWis_ok\fP"
.IX Subsection "is_ok"
.PP
.Vb 1
\&  if ( $result->is_ok ) { ... }
.Ve
Reports whether or not a given result has passed.  Anything which is \fBnot\fR a
test result returns true.  This is merely provided as a convenient shortcut.
.PP
.if n .I "\f(CW""passed""\fP"
.el .I "\f(CWpassed\fP"
.IX Subsection "passed"
.PP
Deprecated.  Please use \f(CW\*(C`is_ok\*(C'\fR instead.
.PP
.if n .I "\f(CW""has_directive""\fP"
.el .I "\f(CWhas_directive\fP"
.IX Subsection "has_directive"
.PP
.Vb 3
\&  if ( $result->has_directive ) {
\&     ...
\&  }
.Ve
Indicates whether or not the given result has a \s-1TODO\s0 or \s-1SKIP\s0 directive.
.PP
.if n .I "\f(CW""has_todo""\fP"
.el .I "\f(CWhas_todo\fP"
.IX Subsection "has_todo"
.PP
.Vb 3
\& if ( $result->has_todo ) {
\&     ...
\& }
.Ve
Indicates whether or not the given result has a \s-1TODO\s0 directive.
.PP
.if n .I "\f(CW""has_skip""\fP"
.el .I "\f(CWhas_skip\fP"
.IX Subsection "has_skip"
.PP
.Vb 3
\& if ( $result->has_skip ) {
\&     ...
\& }
.Ve
Indicates whether or not the given result has a \s-1SKIP\s0 directive.
.PP
.if n .I "\f(CW""set_directive""\fP"
.el .I "\f(CWset_directive\fP"
.IX Subsection "set_directive"
.PP
Set the directive associated with this token. Used internally to fake
\&\s-1TODO\s0 tests.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see the SUBCLASSING entry in the TAP::Parser manpage for a subclassing overview.
.PP
Remember: if you want your subclass to be automatically used by the parser,
you'll have to register it with the register_type entry in the TAP::Parser::ResultFactory manpage.
.PP
If you're creating a completely new result \fItype\fR, you'll probably need to
subclass the TAP::Parser::Grammar manpage too, or else it'll never get used.
.Sh "Example"
.IX Subsection "Example"
.Vb 1
\&  package MyResult;
.Ve
.Vb 1
\&  use strict;
.Ve
.Vb 1
\&  use base 'TAP::Parser::Result';
.Ve
.Vb 2
\&  # register with the factory:
\&  TAP::Parser::ResultFactory->register_type( 'my_type' => __PACKAGE__ );
.Ve
.Vb 1
\&  sub as_string { 'My results all look the same' }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the TAP::Object manpage,
the TAP::Parser manpage,
the TAP::Parser::ResultFactory manpage,
the TAP::Parser::Result::Bailout manpage,
the TAP::Parser::Result::Comment manpage,
the TAP::Parser::Result::Plan manpage,
the TAP::Parser::Result::Pragma manpage,
the TAP::Parser::Result::Test manpage,
the TAP::Parser::Result::Unknown manpage,
the TAP::Parser::Result::Version manpage,
the TAP::Parser::Result::YAML manpage,
